<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Toy&#39;s Blogs</title>
    <link>http://keltoy.github.io/tags/code/</link>
    <description>Recent content in code on Toy&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 29 Apr 2017 12:12:58 +0000</lastBuildDate><atom:link href="http://keltoy.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis 并发小结</title>
      <link>http://keltoy.github.io/posts/redis-%E5%B9%B6%E5%8F%91%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 29 Apr 2017 12:12:58 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/redis-%E5%B9%B6%E5%8F%91%E5%B0%8F%E7%BB%93/</guid>
      <description>Preface 实习了一段时间，一直没有写东西了，最近清闲了一些，开始总结一些实习上所获取的经验。不是很高深，但是可能经常会用到。
应用场景 比如要在网上买理财产品，每个理财产品都是有限定金额的。这个产品会有一个总金额 totalAmount，每个人都可以买，也不限制买多少，但是所有人的购买金额不能超过这个总金额。这是一个很简单的场景，之前没有接触缓存的时候处理也比较简单。这些用户购买的数据是存到数据库中的，因此可以通过数据库直接控制。
使用数据库锁进行处理 使用数据库的共享锁和排他锁是可以实现数据的同步的。但是我没有实际实验过，所有人都说尽量不要这么去实现，效率会低很多。
共享锁： SELECT ... LOCK IN SHARE MODE; 排他锁： SELECT ... FOR UPDATE; 个人的理解，共享锁(S)和排他锁(X)就是读写锁，这种形式在读多写少的情况下会比较高效。
使用数据库的乐观并发机制 使用乐观并发机制，可以在相应的表中添加一个 version 列，每次在购买前获取一下 version，然后进行购买时检查version是否有变化，如果有变化就不进行处理，如果没有变化，在确保成功后更改 version。
当然，在我所举例的例子中，这个 version 可以直接是 总金额 totalAmount，每次操作的时候都对这个总金额进行改变，如果总金额小于0了，说明不能进行处理，回滚处理，购买不成功
看似是个不错的方法，但是有很多的限制。如果数据库不允许修改，而一开始并没有总金额或者 version 这样的列呢，用 updatedtime 也能够实现，但是据说用时间索引效率会低很多。如果数据库分库分表了，又该如何控制？
使用Redis进行并发控制 setnx setnx 是一个事务操作，会先检查缓存中是否存在，如果不存在则设置，否则不做更改。 这样设计不会出现没有volatile 双重检测出现的那样的问题，不会在判断有无之后，插入数据之前的时间插入另外的数据。那么使用 setnx 的用法就与 mutex非常类似，在插入前 setnx，确认成功之后，进行 del。
setnx key value ... del key 在此之前，我也想过使用 incrby 对数据进行增加和减少，但是，在这种情况下，防不住并发。
一点思考 假设现在需要做一点改变。假设每个人最多只能购买三次，第四次购买就失败。如果这样，如果不允许在数据库中需要添加一个 purchase 的列，怎么使用redis 进行设计？ 同样是使用 setnx，然后在内部再使用一个 incrby 是否就安全了？
消息队列 如果使用消息队列，能够保证数据是一个个到来的，那么是不是也可以保证并发，而且降低了复杂度？但是对于一个简单的需求，使用消息的代价也不小。
Postscript 将传统项目放到分布式架构上，就容易出现问题。分布式的消息传递代价也不小，因此，并发这块一直也很热。</description>
    </item>
    
    <item>
      <title>Emacs: org-mode</title>
      <link>http://keltoy.github.io/posts/emacs-org-mode/</link>
      <pubDate>Wed, 18 Jan 2017 11:20:41 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/emacs-org-mode/</guid>
      <description>Time and tide wait for no man
 Preface 已经听了很多人说 org-mode 非常好用，一直不知道怎么用，今天看了看一些文章，发现其实和 markdown 有那么点像，总结总结，想自己做个 GTD。
Org-mode Chapter md 中的章节使用 &amp;ldquo;#&amp;quot;，而 org-mode 中使用 &amp;ldquo;*&amp;quot;。
不过，org-mode 有一些有趣的操作：
 S-tab, toggle 所有的 chapter tab, toggle 当前的 chapter M-left/right, 升级/降级 chapter M-up/down, 调整 chapter 的顺序  List 无序 md 无序队列使用 &amp;ldquo;*&amp;rdquo; 和 &amp;ldquo;+&amp;quot;，而 org-mode 使用 &amp;ldquo;+&amp;rdquo; 和 &amp;ldquo;-&amp;quot;。
注意到的是 md 的间距是不同的：
 这是 &amp;ldquo;*&amp;rdquo; 的第一行 这是第二行   这是 &amp;ldquo;+&amp;rdquo; 的第一行 这是第二行  有序 md 的有序使用的是 &amp;ldquo;1.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Spring IOC - II</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-spring-ioc-ii/</link>
      <pubDate>Thu, 10 Nov 2016 23:09:39 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-spring-ioc-ii/</guid>
      <description>Preface  简单来说 IoC 容器的初始化是由 refresh() 方法启动的，这个方法标志着 IoC 容器正式启动。具体来说这个启动包括 BeanDefinition 的 Resource 定位、载入和注册三个基本过程。
 关于这段话我首先不能理解的就是无缘无故出来的这个BeanDefinition，我在浏览这些源码的时候也没看到。因此，为了好好了解 Spring IoC，我还需要进一步查看内部源码和解释。
What is BeanDefinition?  对 IoC 来说，BeanDefinition 就是对依赖反转模式中管理的对象依赖关系的数据抽象。
Spring 通过定义 BeanDefinition 来管理基于 Spring 的应用中的各种对象以及它们之间的相互依赖关系。BeanDefinition 抽象了我们对 Bean 的定义，是让容器起作用的主要数据类型。
 我的理解 BeanDefinition 有点像 Bean 的元数据，又有点像抽象类，又有点像 schema。
Resource location of BeanDefinition 再次拿出来这幅图来讲一下，像 ClassPathXmlApplicationContext 这样的方法定位资源的方式还是使用的 DefaultResourceLoader。而这个 DefaultResourceLoader 实现的是 ResourceLoader 接口：
public interface ResourceLoader { /** Pseudo URL prefix for loading from the class path: &amp;#34;classpath:&amp;#34; */ String CLASSPATH_URL_PREFIX = ResourceUtils.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Spring IoC</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-spring-ioc/</link>
      <pubDate>Wed, 02 Nov 2016 23:46:46 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-spring-ioc/</guid>
      <description>Preface Spring 的源码在网上基本上都被研究透了，我之前的理解实际上也是基于书本和基于一些项目。既然是阅读源码，那么 Spring 的源码是不得不看的。
Spring IoC 设计 网上找的一张图，和书上的一样，先拿过来用了：
挺多的，但是不复杂，从名字就可以看出来每个类或者接口。
 这个接口系统是以 BeanFactory 和 ApplicationContext 为核心的。
 因此主要也是介绍这两个接口。
BeanFactory  提供的是最基本的 IoC 容器功能 可以使用转义符“&amp;amp;”获取FactoryBean 设计的 getBean 方法是使用 IoC 容器的主要方法。  对于这个转义符，我没弄明白，书上是这么介绍的：
 用户使用容器时，可以使用转义符“&amp;amp;”来得到 FactoryBean 本身，用来区分通过容器来获取 FactoryBean 产生的对象和获取 FacoryBean 产生的对象和获取 FactoryBean 本身。
 简单来说，就是加上“&amp;amp;”之后获取的是 FactoryBean，而不是 FactoryBean 产生的对象。
需要注意的是 BeanFactory 是 IoC容器或者对象工厂，FactoryBean 是 Bean。
public interface BeanFactory { /** * Used to dereference a {@link FactoryBean} instance and distinguish it from * beans &amp;lt;i&amp;gt;created&amp;lt;/i&amp;gt; by the FactoryBean.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- ArrayList</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-arraylist/</link>
      <pubDate>Tue, 25 Oct 2016 23:46:28 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-arraylist/</guid>
      <description>前言 ArrayList，相信大家都不陌生了，它的源码网上也是到处都是，但是我还是想看看，也许会有不一样的发现。
初识 ArrayList ArrayList，顺序列表，非线程安全的，基本用法和数组类似，但是可以扩容。默认初始大小为 10， 扩容大小为 1.5 倍。基本上就这么多。本身构造也简单。
思考 ArrayList 为什么会出现 ArrayList 这个类呢，数组不能够满足要求吗？除了可以扩容，他跟数组有什么区别呢？ 扩容为什么是 1.5 倍？ 初始大小为什么是 10？
ArrayList 源码 ArrayList 变量 基于 1.8 的源码，基本上也没太多可说的，主要针对查找、添加、删除、以及扩容方面进行了解。 首先是 ArrayList 的属性。
public class ArrayList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable { private static final long serialVersionUID = 8683452581122892189L; /** * Default initial capacity. */ private static final int DEFAULT_CAPACITY = 10; /** * Shared empty array instance used for empty instances. */ private static final Object[] EMPTY_ELEMENTDATA = {}; /** * Shared empty array instance used for default sized empty instances.</description>
    </item>
    
    <item>
      <title>Spring Configuration-applicationContext-service.xml &amp; SqlMapConfig.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-applicationcontext-service-xml-sqlmapconfig-xml/</link>
      <pubDate>Wed, 19 Oct 2016 22:29:47 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-applicationcontext-service-xml-sqlmapconfig-xml/</guid>
      <description>前言 配置的问题就到尾声了。使用和了解还是不一样，内部原理实现更是复杂，因此我觉得主要问题还是要放到源码的阅读上。
applicationContext.xml 基本上该配置的都配置了，service 是提供服务的，也不用配别的了，就是配置一下包扫描器，扫描一下 service 包：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&amp;#34;&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.summer.service&amp;#34;/&amp;gt; &amp;lt;/beans&amp;gt; 还有redis 的配置：
&amp;lt;bean class=&amp;#34;redis.clients.jedis.JedisCluster&amp;#34; id=&amp;#34;jedisCluster&amp;#34;&amp;gt; &amp;lt;constructor-arg&amp;gt; &amp;lt;set&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7001&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7002&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7003&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7004&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.</description>
    </item>
    
    <item>
      <title>Spring Configuration-applicationContext-trans.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-applicationcontext-trans-xml/</link>
      <pubDate>Wed, 19 Oct 2016 22:12:27 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-applicationcontext-trans-xml/</guid>
      <description>前言 数据库的操作，一般都少不了事务，单独一个文件配置事务，是因为确实比较重要。
applicationContext.xml 这里配置的时候需要用到aop的切面操作还有通知，注意要加上正确的地址，否则总会报错。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:tx=&amp;#34;http://www.springframework.org/schema/tx&amp;#34; xmlns:aop=&amp;#34;http://www.springframework.org/schema/aop&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&amp;#34;&amp;gt; 基本上就是注意 xmlns:tx 和 xmlns:aop 的位置。 开始配置事务。 先配置事务管理，需要把之前在 dao 层配置的数据库连接池引用过来。
&amp;lt;bean class=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;#34; id=&amp;#34;dataSourceTransactionManager&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; 然后配置通知，配置哪些方法需要通知，这些方法使用什么传播形式。传播形式和会话紧密相关。
&amp;lt;tx:advice transaction-manager=&amp;#34;dataSourceTransactionManager&amp;#34; id=&amp;#34;txAdvice&amp;#34;&amp;gt; &amp;lt;tx:attributes&amp;gt; &amp;lt;tx:method name=&amp;#34;save*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;insert*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;add*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;create*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;delete*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;update*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;find*&amp;#34; propagation=&amp;#34;SUPPORTS&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;select*&amp;#34; propagation=&amp;#34;SUPPORTS&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;get*&amp;#34; propagation=&amp;#34;SUPPORTS&amp;#34;/&amp;gt; &amp;lt;/tx:attributes&amp;gt; &amp;lt;/tx:advice&amp;gt; 然后配置 aop，使用什执行哪些包的什么返回值的 什么参数需要使用以上的通知。</description>
    </item>
    
    <item>
      <title>Spring Configuration-applicationContext-dao.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-applicationcontext-dao-xml/</link>
      <pubDate>Wed, 19 Oct 2016 21:23:55 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-applicationcontext-dao-xml/</guid>
      <description>前言 原本 applicationContext.xml 是一个文件，这里将它拆开是为了更好了解业务的配置。
applicationContext.xml 这里才是真正开始配置 Spring 的参数。 首先还是 xml 文件的头。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd &amp;#34; default-lazy-init=&amp;#34;false&amp;#34;&amp;gt; 依然注意 default-lazy-init=&amp;quot;false&amp;quot; 这一句，有人说不加也可以，是默认的，但是我使用的 Spring4， IDEA 搭建的时候不行。 接下来要配置外在配置，属性持有。这里有一个问题，那就是，在 Spring MVC 我已经配过了，为什么这里还要配一次？这个实际上就是父子容器的问题。
&amp;lt;context:property-placeholder location=&amp;#34;classpath:properties/*.properties&amp;#34;/&amp;gt; 既然是 dao 层配置，那么还需要配置数据库连接池。前两天翻书的时候，发现 druid 还支持 storm。
&amp;lt;bean class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34; id=&amp;#34;dataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;${jdbc.driver}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;${jdbc.username}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;${jdbc.password}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${jdbc.url}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;maxActive&amp;#34; value=&amp;#34;10&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;minIdle&amp;#34; value=&amp;#34;5&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; 配置完数据库连接池，还需要配置 SqlSessionFactory, 用来与数据库创建会话。这让我想起来 Hibernate 的一级缓存 session 和二级缓存 sessionFactory。总的来说，就是把连接池和数据库的配置注入进来。</description>
    </item>
    
    <item>
      <title>Spring Configuration-springmvc.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-springmvc-xml/</link>
      <pubDate>Wed, 19 Oct 2016 14:25:28 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-springmvc-xml/</guid>
      <description>前言 web.xml 配置好了之后（实际上也可以最后配置），还需要配置 web.xml 里面的涉及到一些文件。 先配置 servlet 标签中涉及到的 springmvc.xml。 DispatcherServlet 是前端控制器设计模式的实现，对于前段控制对应的就是 Spring MVC。
springmvc.xml springmvc.xml 的配置是在 web.xml 中的 servlet 标签中的 init-param 中设置。这里可以更改 xml 的位置和名称。我记得如果不配，默认是会在 WEB-INF 中创建一个 DispatcherServlet 的文件。现在我指定在了 resources 目录里面，将 Spring 的配置都放在一起。
首先都是 Spring MVC 的头，
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xmlns:mvc=&amp;#34;http://www.springframework.org/schema/mvc&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&amp;#34; default-lazy-init=&amp;#34;false&amp;#34;&amp;gt; 这里还是要注意这个 default-lazy-init=&amp;quot;false&amp;quot; 这句。
配置外在应用参数。有些参数写在xml虽然可以，但是经常会更改，这些数据可以放到 properties 的文件里，比如用户名，管理员密码等。
&amp;lt;context:property-placeholder location=&amp;#34;classpath:properties/resource.properties&amp;#34;/&amp;gt; 配组件扫描。由于这个项目使用的是注解形式搭建的，所以需要组件扫描器扫描特定包中的注解。这里要说明的是，因为 Spring MVC 主要面向的是前段控制层，所以 Spring MVC 扫描的是 Controller 包的注解。
&amp;lt;context:component-scan base-package=&amp;#34;com.summer.controller&amp;#34;/&amp;gt; 接下来配置的是注解驱动。这个还是蛮重要的，如果不配置，导致注解不能被解析，@RequestMapping 不能使用。</description>
    </item>
    
    <item>
      <title>Spring Configuration - web.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-web-xml/</link>
      <pubDate>Tue, 18 Oct 2016 23:46:34 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-web-xml/</guid>
      <description>前言 关于 Spring 这个框架无需多说了，很经典了，这里先复习一下它的配置。话说不复习还真容易忘了。
Spring 配置 主要还是通过学习的项目，对 Spring, Spring MVC 和 Mybatis 这三大框架的配置进行复习，主要对 Spring的框架配置进行复习。
web.xml 此文件的目录是 src/main/webapp/WEB-INF/，该目录下还有 css, js, jsp 这三个目录。
&amp;lt;!DOCTYPE web-app PUBLIC &amp;#34;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&amp;#34; &amp;#34;http://java.sun.com/dtd/web-app_2_3.dtd&amp;#34; &amp;gt; &amp;lt;web-app xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns=&amp;#34;http://java.sun.com/xml/ns/javaee&amp;#34; xsi:schemaLocation=&amp;#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;#34; id=&amp;#34;WebApp_ID&amp;#34; version=&amp;#34;2.5&amp;#34;&amp;gt; 以上内容基本不怎么更改，使用默认的就行。 设置项目名称：
&amp;lt;display-name&amp;gt;summer&amp;lt;/display-name&amp;gt; 定制欢迎页，就是设置首页方式，首次访问的时候就会跳转到 welcome-file 设置的文件中。
&amp;lt;welcome-file-list&amp;gt; &amp;lt;welcome-file&amp;gt;index.html&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;index.htm&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;default.html&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;default.htm&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;default.jsp&amp;lt;/welcome-file&amp;gt; &amp;lt;/welcome-file-list&amp;gt; context-param 用来声明应用范围(整个WEB项目)内的上下文初始化参数。个人理解就是加载 Spring 配置文件，初始化 Spring 容器。 param-name 设定上下文的参数名称。必须是唯一名称。 param-value 设定的参数名称的值，可以设置为目录文件。
&amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring/applicationContext*.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; 设置监听器。引用他人的介绍：
 ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。 因为它实现了ServletContextListener这个接口，在web.</description>
    </item>
    
    <item>
      <title>Class Loaders in Java</title>
      <link>http://keltoy.github.io/posts/class-loaders-in-java/</link>
      <pubDate>Thu, 13 Oct 2016 12:13:07 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/class-loaders-in-java/</guid>
      <description>前言 好像一直没搞明白，但是每次都会被问到，总结总结，看看自己的理解到哪一步了。
初识 Class Loaders 首先，类加载器的架构：
+-----------------+ | | | +-------------+ | +--------------------------------+ | | Bootstrap | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | Load JRE/lib/rt.jar | | | ClassLoader | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | specified by -Xbootclasspath | | +-------------+ | +--------------------------------+ | | | +-------------+ | +--------------------------------+ | | Extension | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | Load JRE/lib/ext/*.jar | | | ClassLoader | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | specified by -Djava.ext.dirs | | +-------------+ | +--------------------------------+ | | | +-------------+ | +--------------------------------+ | | App | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | Load CLASSPATH | | | ClassLoader | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | specified by -Djava.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Integer</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-integer/</link>
      <pubDate>Tue, 11 Oct 2016 00:41:30 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-integer/</guid>
      <description>前言  Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris. &amp;ndash; Larry Wall
 细细数来，我好像还没有做过源码的东西，不看看优秀的源码，如何才能够有长远的进步呢？就从 Java 开始，边看边总结这些源码。先看Integer。
初识 Integer 首先Integer是一个类，包装 int 的类，为了更好地和其他方法和范型配合，所以需要把基础类型包装成一个类。既然是类当然就可以设置为 null，这是基本类型做不到的，基本类型初始化也只能是 0。 Integer 和 int 在实际操作过程中是可以相等的，Integer 在匹配 int 类型的数据的时候，就会自动装箱和拆箱。 基本上，我对 Integer 的理解也就到这个程度。这样就可以理解为什么以下的结果有所不同：
int i = 0; Integer i2 = 0; Integer i3 = new Integer(0); Integer i4 = new Integer(0); Integer i5 = 0; System.out.println(i == i2); // true System.</description>
    </item>
    
    <item>
      <title>How to display grid in Pandas</title>
      <link>http://keltoy.github.io/posts/how-to-display-grid-in-pandas/</link>
      <pubDate>Sat, 08 Oct 2016 17:07:57 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/how-to-display-grid-in-pandas/</guid>
      <description>前言  “Life is short, You need Python.” &amp;ndash; Bruce Eckel
 Manager说是要把处理的数据展示出来&amp;hellip;&amp;hellip;我就想偷个懒直接使用Matplotlib实现得了，省着使用 D3.js 了，当然如果需要的话，还是很好转过来的。
首先吧，因为不仅需要展示，还需要处理后的数据，所以为了其他人方便，就吧结果存成了csv格式的了。其他格式都大同小异，js还在学习过程中，而且公司的本调试起来非常不方便，所以才使用的 Python&amp;hellip;
使用DataFrame展示 一开始想的就是调用 matplotlib.pylab 画图，表里面的一个 column 作为横轴，另一个column作为纵轴然后就可以了。但是后来我发现没那么复杂，DataFrame 直接就可以调用 plot&amp;hellip;.
import pandas as import pd df = pd.read_csv(filename) df.plot() 发现了这个之后感觉我的代码又一次简化了&amp;hellip;.
显示网格 这个其实没啥说的， 看一下 plot 的 api 有一个参数就叫做 grid，把这个赋值成 True，就行了。
df.plot(grid=True) 显示点 然后我就给了我的Manager。Manager说，不行啊，图上的点都没有突出&amp;hellip; 于是图形再次修改，查到 plot 函数是实现 matplotlib 的 plotting 方法的，所以可以使用 marker 参数的，于是又有了如下修改。
df.plot(marker=&amp;#39;o&amp;#39;, grid=True) 其中 &amp;lsquo;o&amp;rsquo; 代表的就是每个点使用圆圈标注。
调整刻度 这下应该可以了吧？ Manager 又来传话：网格的间距太大，能不能缩小一点？ 呃&amp;hellip;. 我看了看 API，貌似没有什么可以把网格缩小的方法&amp;hellip;. 于是，我又一次把问题想复杂了&amp;hellip;. 网格的大小实际上就是刻度的大小，如果刻度数量太多了，那么 DataFrame 自己会进行调整，但是这样的调整可能太大了，不符合人眼观测。所以，调整轴间距就可以完全满足。xticks 和 yticks，这里我只使用了xticks。调整完毕之后发现一连串的问题，生成的图片太小，根本看不清楚，横轴的标识全都挤在了一起无法辨认，很临界点看着不舒服&amp;hellip;.</description>
    </item>
    
    <item>
      <title>Mathematics for Thinking Code</title>
      <link>http://keltoy.github.io/posts/mathematics-for-thinking-code/</link>
      <pubDate>Sun, 02 Oct 2016 14:42:21 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/mathematics-for-thinking-code/</guid>
      <description>Preface  Histories make men wise; poets, witty; the mathematics, subtle; natural philosophy, deep; moral, grave; logic and rhetoric, able to contend. &amp;ndash; Francis Bacon, The Collected Works of Sir Francis Bacon
 It is very significant that mathematics for programmer. A skilled programmer, who is good at mathematics, is able to simplify problems whatever in life or engineering. A textbook, Mathematics for Computer Science, makes me learn a lot.</description>
    </item>
    
    <item>
      <title>时间复杂度</title>
      <link>http://keltoy.github.io/posts/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Fri, 30 Sep 2016 11:45:33 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>所有的时间复杂度 其实是这个网站的图。。。感觉好用就拿来了。 还有一个是各类时间复杂度的比较。
   数据结构 时间复杂度 &amp;ndash; &amp;ndash; &amp;ndash; &amp;ndash; &amp;ndash; &amp;ndash; &amp;ndash; 空间复杂度      平均 &amp;ndash; &amp;ndash; &amp;ndash; 最快 &amp;ndash; &amp;ndash; &amp;ndash; 最坏    访问 查找 插入 删除 访问 查找 插入 删除    Array $$\theta(1)$$ $$\theta(n)$$ $$\theta(n)$$ $$\theta(n)$$ $$O(1)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$   Stack $$\theta(n)$$ $$\theta(n)$$ $$\theta(1)$$ $$\theta(1)$$ $$O(n)$$ $$O(n)$$ $$O(1)$$ $$O(1)$$ $$O(n)$$   Queue $$\theta(n)$$ $$\theta(n)$$ $$\theta(1)$$ $$\theta(1)$$ $$O(n)$$ $$O(n)$$ $$O(1)$$ $$O(1)$$ $$O(n)$$   Singly-Linked List $$\theta(n)$$ $$\theta(n)$$ $$\theta(1)$$ $$\theta(1)$$ $$O(n)$$ $$O(n)$$ $$O(1)$$ $$O(1)$$ $$O(n)$$   Doubly-Linked List $$\theta(n)$$ $$\theta(n)$$ $$\theta(1)$$ $$\theta(1)$$ $$O(n)$$ $$O(n)$$ $$O(1)$$ $$O(1)$$ $$O(n)$$   Skip List $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n\log_2(n))$$   Hash Table N/A $$\theta(1)$$ $$\theta(1)$$ $$\theta(1)$$ N/A $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$   Binary Search Tree $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$   Cartesian Tree N/A $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ N/A $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$   B-Tree $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(n)$$   Red-Black Tree $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(n)$$   Splay Tree N/A $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ N/A $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(n)$$   AVL Tree $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(\log_2(n))$$ $$O(n)$$   KD Tree $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$\theta(\log_2(n))$$ $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$ $$O(n)$$    还有排序时间复杂度：</description>
    </item>
    
    <item>
      <title>编程中的临界值</title>
      <link>http://keltoy.github.io/posts/%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%B4%E7%95%8C%E5%80%BC/</link>
      <pubDate>Sun, 25 Sep 2016 12:51:55 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%B4%E7%95%8C%E5%80%BC/</guid>
      <description>前言 刷题、面试、OJ 过程中，总是被编程题所困扰，往往是有思路能解答，但是不能 100% AC，看着刷子和cheater们拿走offer，心里有种说不出的感觉，内心下定决心，一定要完成 100% AC &amp;hellip;
于是我稳稳心态，吃根辣条压压惊，刷刷OJ，找找感觉，在这里总结一下如何能够考虑到所有的情况。
不能 100% AC 顾名思义，基本上我所出现的问题都是，思路正确，编程问题不大，但是不够严谨，很多时候不能够考虑到所有的情况，导致 AC 的通过率总是在 60%~90% 徘徊。如何才能够考虑到所有情况，才是我所要解决的关键。
通常情况 通常情况一般就是 OJ 里面所举例说明的案例，这个案例如果过不了则说明所选的算法可能本身就有问题。不论是 hash，backtrack，dp，recursion 还是其他，首先考虑所选用的方法是否合适解决此类问题。如果能够通过说明案例，至少说明方法应该不会错太多。
临界值 临界值这个首先要看清楚题目所给出的范围，比如说： $$0 &amp;lt;= m &amp;lt;= 10^5$$ 这里就要注意两边注意两边的值一个是可以取到 0 的， 而另一边，要看看是否大于了int类型的临界值 (Integer.MAX_VALUE()) 等等。 输出也是需要有临界值的，所以输出也是需要判断的。 还有一类就是自己加的一些参数，这些参数也可能影响结果&amp;hellip; 比如说，给定的输入只有一个n，但是我要的方法需要 recursion，需要在方法中添加一个 res, 和 ix，这时候需要注意这两个值有没有临界值。
void solution(int n, int res, int ix) { if (res &amp;gt; SOMEVALUE) { // my code...  } if (ix &amp;gt; SOMEINDEX) { // my code...  } // my code.</description>
    </item>
    
  </channel>
</rss>
