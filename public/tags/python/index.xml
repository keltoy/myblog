<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Toy&#39;s Blogs</title>
    <link>http://keltoy.github.io/tags/python/</link>
    <description>Recent content in python on Toy&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 08 Apr 2020 13:43:00 +0000</lastBuildDate><atom:link href="http://keltoy.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>conda 命令</title>
      <link>http://keltoy.github.io/posts/conda-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 08 Apr 2020 13:43:00 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/conda-%E5%91%BD%E4%BB%A4/</guid>
      <description>前言 之前都是使用 pip 和 virtualenv 管理python 的包管理和环境管理，最近体验了一下 jupyterlab， 好多插件的使用都需要安装nodejs，virtualenv 只能管理python 的环境，于是就想到了conda 试试conda 的环境管理能不能，惊喜的发现可以，所以以后的使用应该都迁移到 conda上来了
conda简介 说明原文conda 文档
conda 是开源的跨操作系统的包管理系统和环境管理系统，可以管理多种语言，运行安装都比较简单
conda 包管理 # 添加一个渠道，获取软件包的渠道 常用的有 bioconda, conda-forge, genomedk conda config --add channel # 设置去掉url显示 conda config --set show_channel_urls yes # 渠道列表 conda config --get channels # 搜索包 conda search [-c channel] packagename # 安装包 conda install packagename=versionnumber # 包列表 conda list # 删除包 conda remove packagename conda 环境管理 # 环境列表 conda env --list # 环境信息 conda info --envs # 创建python3环境 conda create -n name python=3 # 激活环境 conda activate environmentname # 退出环境 conda deactivate # 删除环境 conda remove -n environmentname --all </description>
    </item>
    
    <item>
      <title>virtualenv 小记</title>
      <link>http://keltoy.github.io/posts/virtualenv-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jul 2019 17:15:27 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/virtualenv-%E5%B0%8F%E8%AE%B0/</guid>
      <description>前言 最近想要获取url上的固定每日数据，写到原始脚本里发现程序卡死了，思前想后想再写一个脚本，这样也不用怎么修改之前的脚本。因为在服务器上运行还需要一些权限，所以希望能够使用virtualenv配置一下自己的环境。
开始实践 在服务器上安装 vitualenv, 然后创建环境就可以运行了
pip install virtualenv virtualenv --no-site-packages venv  &amp;ndash;no-site-packages 代表安装虚拟环境的时候不需要任何其他多余的包
 自己对虚拟环境的误解 因为是服务器环境，我发现我并没有root权限不能安装任何python的包。 我就希望将自己笔记本的python 环境打好包，安装到服务器上。 于是我将需要的包和库安装好后，使用virtualenv 配置好，打包传送到服务器上，准备使用virtualenv 开始运行
./venv/bin/activate 服务端的前缀出现了python3 的小括号，感觉目前都比较顺利。 然后查看版本号
python -V 2.7.5 怎么回事？没有变化？应该是变化成了virtualenv 中的 3.7才对 然后调用env中的python 确实是 3.7 于是 更改python 重新运行，发现这个3.7的python 什么包也照得不到。
看来自己对虚拟环境是有所误解
于是检查了一下venv/bin下的 activate 文件，才发现原来这个文件只是做了个映射
VIRTUAL_ENV=&amp;#34;xxx/venv&amp;#34; export VIRTUAL_ENV 所以想让activate 生效， 还需要更改这里的地址。</description>
    </item>
    
    <item>
      <title>How to display grid in Pandas</title>
      <link>http://keltoy.github.io/posts/how-to-display-grid-in-pandas/</link>
      <pubDate>Sat, 08 Oct 2016 17:07:57 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/how-to-display-grid-in-pandas/</guid>
      <description>前言  “Life is short, You need Python.” &amp;ndash; Bruce Eckel
 Manager说是要把处理的数据展示出来&amp;hellip;&amp;hellip;我就想偷个懒直接使用Matplotlib实现得了，省着使用 D3.js 了，当然如果需要的话，还是很好转过来的。
首先吧，因为不仅需要展示，还需要处理后的数据，所以为了其他人方便，就吧结果存成了csv格式的了。其他格式都大同小异，js还在学习过程中，而且公司的本调试起来非常不方便，所以才使用的 Python&amp;hellip;
使用DataFrame展示 一开始想的就是调用 matplotlib.pylab 画图，表里面的一个 column 作为横轴，另一个column作为纵轴然后就可以了。但是后来我发现没那么复杂，DataFrame 直接就可以调用 plot&amp;hellip;.
import pandas as import pd df = pd.read_csv(filename) df.plot() 发现了这个之后感觉我的代码又一次简化了&amp;hellip;.
显示网格 这个其实没啥说的， 看一下 plot 的 api 有一个参数就叫做 grid，把这个赋值成 True，就行了。
df.plot(grid=True) 显示点 然后我就给了我的Manager。Manager说，不行啊，图上的点都没有突出&amp;hellip; 于是图形再次修改，查到 plot 函数是实现 matplotlib 的 plotting 方法的，所以可以使用 marker 参数的，于是又有了如下修改。
df.plot(marker=&amp;#39;o&amp;#39;, grid=True) 其中 &amp;lsquo;o&amp;rsquo; 代表的就是每个点使用圆圈标注。
调整刻度 这下应该可以了吧？ Manager 又来传话：网格的间距太大，能不能缩小一点？ 呃&amp;hellip;. 我看了看 API，貌似没有什么可以把网格缩小的方法&amp;hellip;. 于是，我又一次把问题想复杂了&amp;hellip;. 网格的大小实际上就是刻度的大小，如果刻度数量太多了，那么 DataFrame 自己会进行调整，但是这样的调整可能太大了，不符合人眼观测。所以，调整轴间距就可以完全满足。xticks 和 yticks，这里我只使用了xticks。调整完毕之后发现一连串的问题，生成的图片太小，根本看不清楚，横轴的标识全都挤在了一起无法辨认，很临界点看着不舒服&amp;hellip;.</description>
    </item>
    
  </channel>
</rss>
