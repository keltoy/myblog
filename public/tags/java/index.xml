<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Toy&#39;s Blogs</title>
    <link>http://keltoy.github.io/tags/java/</link>
    <description>Recent content in java on Toy&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 21 May 2020 16:03:03 +0000</lastBuildDate><atom:link href="http://keltoy.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>jmap jstack jstat</title>
      <link>http://keltoy.github.io/posts/jmap-jstack-jstat/</link>
      <pubDate>Thu, 21 May 2020 16:03:03 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/jmap-jstack-jstat/</guid>
      <description>[toc]
jps (Java Virtual Machine Process) 用来输出JVM 进程状态信息
jps [options] [hostid] 如果不指定 hostid 那么久默认当前服务器
option 命令：
 -q 不输出类名，jar名和传入main方法的参数 -m 输出传入main方法的参数 -l 输出main类或者Jar的权限名 -v 输出传入JVM的参数  jmap（查看内存，对象） 可以输出所有内存中对象的工具，甚至是将VM 中的heap，以二进制输出成文本；打印出某个java进程(pid)内存中的所有对象的情况
jmap [option] pid jmap [option] executable core jmap [option] [service-id@]remote-hostname-or-IP 其中：
 option 选项参数 pid 打印配置信息的进程id executable 产生核心dump的java 可执行文件 core 需要打印配置信息的核心文件 server-id 可选唯一id，如果相同的远程主机上运行了多台调试服务器，可以用来标识服务器 remote-hostname-or-IP 远程调试服务器的主机名或ip  option的取值有：
 &amp;lt;none&amp;gt; 查看进程的内存映像信息 -heap 显示java堆详细信息 -histo[:live] 统计java对象堆的直方图 -clstats 打印类加载器信息 -finalizerinfo 显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象 dump:&amp;lt;dump-options&amp;gt; 生成堆转储快照 F: 当-dump没有响应时， 使用 -dump 或者 -histo参数。在这个模式下,live子参数无效.</description>
    </item>
    
    <item>
      <title>maven plugins</title>
      <link>http://keltoy.github.io/posts/maven-plugins/</link>
      <pubDate>Wed, 15 Apr 2020 22:10:16 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/maven-plugins/</guid>
      <description>maven plugins [toc]
manven-enforcer-plugin 功能 在项目validate的过程时，对项目环境进行检查
原理 enforcer 配置之后会默认在validate 后执行enforcer:enforce，对项目环境进行检查
使用 &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-enforcer-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.1&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;!-- 执行实例的id --&amp;gt; &amp;lt;id&amp;gt;default-cli&amp;lt;/id&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;!-- 执行的命令 --&amp;gt; &amp;lt;goal&amp;gt;enforce&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;!-- 执行的阶段 --&amp;gt; &amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;!-- 制定的规则 --&amp;gt; &amp;lt;rules&amp;gt; &amp;lt;!-- 制定jdk版本 --&amp;gt; &amp;lt;requireJavaVersion&amp;gt; &amp;lt;!-- 执行失败后的消息提示 --&amp;gt; &amp;lt;message&amp;gt; &amp;lt;![CDATA[You are running an older version of Java. This application requires at least JDK ${java.version}.]]&amp;gt; &amp;lt;/message&amp;gt; &amp;lt;!-- jdk版本规则 --&amp;gt; &amp;lt;version&amp;gt;[${java.version}.0,)&amp;lt;/version&amp;gt; &amp;lt;/requireJavaVersion&amp;gt; &amp;lt;/rules&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;java.</description>
    </item>
    
    <item>
      <title>Synchronized</title>
      <link>http://keltoy.github.io/posts/synchronized/</link>
      <pubDate>Thu, 18 Oct 2018 16:46:11 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/synchronized/</guid>
      <description>前言 Java 中 synchronized 关键字 在 很早以前就已经有了，我还记得自己刚开始学习 Java 的时候，别人问我并发的时候我都是说，加个 synchronized 就好了，温故而知新，现在重新学习 synchronized 关键字。
正文 注意的是，synchronized 是可重入锁！！
synchronized 同步基础 Java 中的对象创建时就有了监视器，每个 Java 对象都可以作为锁，
 普通同步方法，锁就是当前实力对象(this对象) 静态同步方法，锁是当前Class对象(.class对象) 同步方法块，锁是 synchronized 括号内部配置的对象  所以说，synchronized 锁住的都是对象。
synchronized 实现原理 Synchronized 代码块的实现是通过监视器实现的。使用 monitorenter 和 monitorexit 这两个指令来实现的，而且这两条指令必须成对出现。
  monitorenter 指令在编译后插入到同步代码块的开始位置
  monitorexit 指令是出入在异常处和结束位置
  Java 对象头 Synchronized 锁是存在 Java对象头里的。
 如果是对象，占用2个字来存储 如果是数组，占用3个字来存储     长度 内容 说明     32/64bit Mark Word 存储对象的hashCode或者锁信息   32/64bit Class Metadata Address 存储到对象类型的指针   32/64bit Array length 数组才有的选项，存储数组的长度    锁的升级 Synchronized 锁一共有4种状态，逐次升级。 级别由低到高：</description>
    </item>
    
    <item>
      <title>ConcurrentHashMap</title>
      <link>http://keltoy.github.io/posts/concurrenthashmap/</link>
      <pubDate>Tue, 16 Oct 2018 09:31:33 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/concurrenthashmap/</guid>
      <description>前言 重新学习ConcurrentHashMap
正题 使用ConcurrentHashMap的原因  ConcurrentHashMap 是 线程安全且高效的 HashMap 并发编程中使用HashMap可能导致程序死循环 HashTable 效率低下  HashMap 导致死循环 final HashMap&amp;lt;String, String&amp;gt; map = new Hashmap&amp;lt;String, String&amp;gt;(2); Thread t new Thread(new Runnable() { @Override public void run() { for (int i = 0; i &amp;lt; 10000; i++) { new Thread(new Runnable() { @Override public void run() { map.put(UUID.randomUUID().toString(), &amp;#34;&amp;#34;); } }, &amp;#34;ftf&amp;#34;+i).start(); } } }, &amp;#34;ftf&amp;#34;); t.start(); t.join(); 在多线程的情况下，HashMap 的 Entry 链表可能会形成有环形的数据结构，那么 Entry 的 next 节点 就不可能为空，那就有可能无限循环获取 Entry。</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Spring IOC - II</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-spring-ioc-ii/</link>
      <pubDate>Thu, 10 Nov 2016 23:09:39 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-spring-ioc-ii/</guid>
      <description>Preface  简单来说 IoC 容器的初始化是由 refresh() 方法启动的，这个方法标志着 IoC 容器正式启动。具体来说这个启动包括 BeanDefinition 的 Resource 定位、载入和注册三个基本过程。
 关于这段话我首先不能理解的就是无缘无故出来的这个BeanDefinition，我在浏览这些源码的时候也没看到。因此，为了好好了解 Spring IoC，我还需要进一步查看内部源码和解释。
What is BeanDefinition?  对 IoC 来说，BeanDefinition 就是对依赖反转模式中管理的对象依赖关系的数据抽象。
Spring 通过定义 BeanDefinition 来管理基于 Spring 的应用中的各种对象以及它们之间的相互依赖关系。BeanDefinition 抽象了我们对 Bean 的定义，是让容器起作用的主要数据类型。
 我的理解 BeanDefinition 有点像 Bean 的元数据，又有点像抽象类，又有点像 schema。
Resource location of BeanDefinition 再次拿出来这幅图来讲一下，像 ClassPathXmlApplicationContext 这样的方法定位资源的方式还是使用的 DefaultResourceLoader。而这个 DefaultResourceLoader 实现的是 ResourceLoader 接口：
public interface ResourceLoader { /** Pseudo URL prefix for loading from the class path: &amp;#34;classpath:&amp;#34; */ String CLASSPATH_URL_PREFIX = ResourceUtils.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Spring IoC</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-spring-ioc/</link>
      <pubDate>Wed, 02 Nov 2016 23:46:46 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-spring-ioc/</guid>
      <description>Preface Spring 的源码在网上基本上都被研究透了，我之前的理解实际上也是基于书本和基于一些项目。既然是阅读源码，那么 Spring 的源码是不得不看的。
Spring IoC 设计 网上找的一张图，和书上的一样，先拿过来用了：
挺多的，但是不复杂，从名字就可以看出来每个类或者接口。
 这个接口系统是以 BeanFactory 和 ApplicationContext 为核心的。
 因此主要也是介绍这两个接口。
BeanFactory  提供的是最基本的 IoC 容器功能 可以使用转义符“&amp;amp;”获取FactoryBean 设计的 getBean 方法是使用 IoC 容器的主要方法。  对于这个转义符，我没弄明白，书上是这么介绍的：
 用户使用容器时，可以使用转义符“&amp;amp;”来得到 FactoryBean 本身，用来区分通过容器来获取 FactoryBean 产生的对象和获取 FacoryBean 产生的对象和获取 FactoryBean 本身。
 简单来说，就是加上“&amp;amp;”之后获取的是 FactoryBean，而不是 FactoryBean 产生的对象。
需要注意的是 BeanFactory 是 IoC容器或者对象工厂，FactoryBean 是 Bean。
public interface BeanFactory { /** * Used to dereference a {@link FactoryBean} instance and distinguish it from * beans &amp;lt;i&amp;gt;created&amp;lt;/i&amp;gt; by the FactoryBean.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- ArrayList</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-arraylist/</link>
      <pubDate>Tue, 25 Oct 2016 23:46:28 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-arraylist/</guid>
      <description>前言 ArrayList，相信大家都不陌生了，它的源码网上也是到处都是，但是我还是想看看，也许会有不一样的发现。
初识 ArrayList ArrayList，顺序列表，非线程安全的，基本用法和数组类似，但是可以扩容。默认初始大小为 10， 扩容大小为 1.5 倍。基本上就这么多。本身构造也简单。
思考 ArrayList 为什么会出现 ArrayList 这个类呢，数组不能够满足要求吗？除了可以扩容，他跟数组有什么区别呢？ 扩容为什么是 1.5 倍？ 初始大小为什么是 10？
ArrayList 源码 ArrayList 变量 基于 1.8 的源码，基本上也没太多可说的，主要针对查找、添加、删除、以及扩容方面进行了解。 首先是 ArrayList 的属性。
public class ArrayList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable { private static final long serialVersionUID = 8683452581122892189L; /** * Default initial capacity. */ private static final int DEFAULT_CAPACITY = 10; /** * Shared empty array instance used for empty instances. */ private static final Object[] EMPTY_ELEMENTDATA = {}; /** * Shared empty array instance used for default sized empty instances.</description>
    </item>
    
    <item>
      <title>Spring Configuration-applicationContext-service.xml &amp; SqlMapConfig.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-applicationcontext-service-xml-sqlmapconfig-xml/</link>
      <pubDate>Wed, 19 Oct 2016 22:29:47 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-applicationcontext-service-xml-sqlmapconfig-xml/</guid>
      <description>前言 配置的问题就到尾声了。使用和了解还是不一样，内部原理实现更是复杂，因此我觉得主要问题还是要放到源码的阅读上。
applicationContext.xml 基本上该配置的都配置了，service 是提供服务的，也不用配别的了，就是配置一下包扫描器，扫描一下 service 包：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&amp;#34;&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.summer.service&amp;#34;/&amp;gt; &amp;lt;/beans&amp;gt; 还有redis 的配置：
&amp;lt;bean class=&amp;#34;redis.clients.jedis.JedisCluster&amp;#34; id=&amp;#34;jedisCluster&amp;#34;&amp;gt; &amp;lt;constructor-arg&amp;gt; &amp;lt;set&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7001&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7002&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7003&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.21.14.118&amp;#34; /&amp;gt; &amp;lt;constructor-arg name=&amp;#34;port&amp;#34; value=&amp;#34;7004&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean class=&amp;#34;redis.clients.jedis.HostAndPort&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;host&amp;#34; value=&amp;#34;172.</description>
    </item>
    
    <item>
      <title>Spring Configuration-applicationContext-trans.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-applicationcontext-trans-xml/</link>
      <pubDate>Wed, 19 Oct 2016 22:12:27 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-applicationcontext-trans-xml/</guid>
      <description>前言 数据库的操作，一般都少不了事务，单独一个文件配置事务，是因为确实比较重要。
applicationContext.xml 这里配置的时候需要用到aop的切面操作还有通知，注意要加上正确的地址，否则总会报错。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:tx=&amp;#34;http://www.springframework.org/schema/tx&amp;#34; xmlns:aop=&amp;#34;http://www.springframework.org/schema/aop&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&amp;#34;&amp;gt; 基本上就是注意 xmlns:tx 和 xmlns:aop 的位置。 开始配置事务。 先配置事务管理，需要把之前在 dao 层配置的数据库连接池引用过来。
&amp;lt;bean class=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;#34; id=&amp;#34;dataSourceTransactionManager&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;dataSource&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; 然后配置通知，配置哪些方法需要通知，这些方法使用什么传播形式。传播形式和会话紧密相关。
&amp;lt;tx:advice transaction-manager=&amp;#34;dataSourceTransactionManager&amp;#34; id=&amp;#34;txAdvice&amp;#34;&amp;gt; &amp;lt;tx:attributes&amp;gt; &amp;lt;tx:method name=&amp;#34;save*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;insert*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;add*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;create*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;delete*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;update*&amp;#34; propagation=&amp;#34;REQUIRED&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;find*&amp;#34; propagation=&amp;#34;SUPPORTS&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;select*&amp;#34; propagation=&amp;#34;SUPPORTS&amp;#34;/&amp;gt; &amp;lt;tx:method name=&amp;#34;get*&amp;#34; propagation=&amp;#34;SUPPORTS&amp;#34;/&amp;gt; &amp;lt;/tx:attributes&amp;gt; &amp;lt;/tx:advice&amp;gt; 然后配置 aop，使用什执行哪些包的什么返回值的 什么参数需要使用以上的通知。</description>
    </item>
    
    <item>
      <title>Spring Configuration-applicationContext-dao.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-applicationcontext-dao-xml/</link>
      <pubDate>Wed, 19 Oct 2016 21:23:55 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-applicationcontext-dao-xml/</guid>
      <description>前言 原本 applicationContext.xml 是一个文件，这里将它拆开是为了更好了解业务的配置。
applicationContext.xml 这里才是真正开始配置 Spring 的参数。 首先还是 xml 文件的头。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd &amp;#34; default-lazy-init=&amp;#34;false&amp;#34;&amp;gt; 依然注意 default-lazy-init=&amp;quot;false&amp;quot; 这一句，有人说不加也可以，是默认的，但是我使用的 Spring4， IDEA 搭建的时候不行。 接下来要配置外在配置，属性持有。这里有一个问题，那就是，在 Spring MVC 我已经配过了，为什么这里还要配一次？这个实际上就是父子容器的问题。
&amp;lt;context:property-placeholder location=&amp;#34;classpath:properties/*.properties&amp;#34;/&amp;gt; 既然是 dao 层配置，那么还需要配置数据库连接池。前两天翻书的时候，发现 druid 还支持 storm。
&amp;lt;bean class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34; id=&amp;#34;dataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;${jdbc.driver}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;${jdbc.username}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;${jdbc.password}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${jdbc.url}&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;maxActive&amp;#34; value=&amp;#34;10&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;minIdle&amp;#34; value=&amp;#34;5&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; 配置完数据库连接池，还需要配置 SqlSessionFactory, 用来与数据库创建会话。这让我想起来 Hibernate 的一级缓存 session 和二级缓存 sessionFactory。总的来说，就是把连接池和数据库的配置注入进来。</description>
    </item>
    
    <item>
      <title>Spring Configuration-springmvc.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-springmvc-xml/</link>
      <pubDate>Wed, 19 Oct 2016 14:25:28 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-springmvc-xml/</guid>
      <description>前言 web.xml 配置好了之后（实际上也可以最后配置），还需要配置 web.xml 里面的涉及到一些文件。 先配置 servlet 标签中涉及到的 springmvc.xml。 DispatcherServlet 是前端控制器设计模式的实现，对于前段控制对应的就是 Spring MVC。
springmvc.xml springmvc.xml 的配置是在 web.xml 中的 servlet 标签中的 init-param 中设置。这里可以更改 xml 的位置和名称。我记得如果不配，默认是会在 WEB-INF 中创建一个 DispatcherServlet 的文件。现在我指定在了 resources 目录里面，将 Spring 的配置都放在一起。
首先都是 Spring MVC 的头，
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xmlns:mvc=&amp;#34;http://www.springframework.org/schema/mvc&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&amp;#34; default-lazy-init=&amp;#34;false&amp;#34;&amp;gt; 这里还是要注意这个 default-lazy-init=&amp;quot;false&amp;quot; 这句。
配置外在应用参数。有些参数写在xml虽然可以，但是经常会更改，这些数据可以放到 properties 的文件里，比如用户名，管理员密码等。
&amp;lt;context:property-placeholder location=&amp;#34;classpath:properties/resource.properties&amp;#34;/&amp;gt; 配组件扫描。由于这个项目使用的是注解形式搭建的，所以需要组件扫描器扫描特定包中的注解。这里要说明的是，因为 Spring MVC 主要面向的是前段控制层，所以 Spring MVC 扫描的是 Controller 包的注解。
&amp;lt;context:component-scan base-package=&amp;#34;com.summer.controller&amp;#34;/&amp;gt; 接下来配置的是注解驱动。这个还是蛮重要的，如果不配置，导致注解不能被解析，@RequestMapping 不能使用。</description>
    </item>
    
    <item>
      <title>Spring Configuration - web.xml</title>
      <link>http://keltoy.github.io/posts/spring-configuration-web-xml/</link>
      <pubDate>Tue, 18 Oct 2016 23:46:34 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/spring-configuration-web-xml/</guid>
      <description>前言 关于 Spring 这个框架无需多说了，很经典了，这里先复习一下它的配置。话说不复习还真容易忘了。
Spring 配置 主要还是通过学习的项目，对 Spring, Spring MVC 和 Mybatis 这三大框架的配置进行复习，主要对 Spring的框架配置进行复习。
web.xml 此文件的目录是 src/main/webapp/WEB-INF/，该目录下还有 css, js, jsp 这三个目录。
&amp;lt;!DOCTYPE web-app PUBLIC &amp;#34;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&amp;#34; &amp;#34;http://java.sun.com/dtd/web-app_2_3.dtd&amp;#34; &amp;gt; &amp;lt;web-app xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns=&amp;#34;http://java.sun.com/xml/ns/javaee&amp;#34; xsi:schemaLocation=&amp;#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;#34; id=&amp;#34;WebApp_ID&amp;#34; version=&amp;#34;2.5&amp;#34;&amp;gt; 以上内容基本不怎么更改，使用默认的就行。 设置项目名称：
&amp;lt;display-name&amp;gt;summer&amp;lt;/display-name&amp;gt; 定制欢迎页，就是设置首页方式，首次访问的时候就会跳转到 welcome-file 设置的文件中。
&amp;lt;welcome-file-list&amp;gt; &amp;lt;welcome-file&amp;gt;index.html&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;index.htm&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;default.html&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;default.htm&amp;lt;/welcome-file&amp;gt; &amp;lt;welcome-file&amp;gt;default.jsp&amp;lt;/welcome-file&amp;gt; &amp;lt;/welcome-file-list&amp;gt; context-param 用来声明应用范围(整个WEB项目)内的上下文初始化参数。个人理解就是加载 Spring 配置文件，初始化 Spring 容器。 param-name 设定上下文的参数名称。必须是唯一名称。 param-value 设定的参数名称的值，可以设置为目录文件。
&amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath:spring/applicationContext*.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; 设置监听器。引用他人的介绍：
 ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。 因为它实现了ServletContextListener这个接口，在web.</description>
    </item>
    
    <item>
      <title>Class Loaders in Java</title>
      <link>http://keltoy.github.io/posts/class-loaders-in-java/</link>
      <pubDate>Thu, 13 Oct 2016 12:13:07 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/class-loaders-in-java/</guid>
      <description>前言 好像一直没搞明白，但是每次都会被问到，总结总结，看看自己的理解到哪一步了。
初识 Class Loaders 首先，类加载器的架构：
+-----------------+ | | | +-------------+ | +--------------------------------+ | | Bootstrap | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | Load JRE/lib/rt.jar | | | ClassLoader | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | specified by -Xbootclasspath | | +-------------+ | +--------------------------------+ | | | +-------------+ | +--------------------------------+ | | Extension | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | Load JRE/lib/ext/*.jar | | | ClassLoader | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | specified by -Djava.ext.dirs | | +-------------+ | +--------------------------------+ | | | +-------------+ | +--------------------------------+ | | App | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | Load CLASSPATH | | | ClassLoader | | &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; | specified by -Djava.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Integer</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-integer/</link>
      <pubDate>Tue, 11 Oct 2016 00:41:30 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-integer/</guid>
      <description>前言  Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris. &amp;ndash; Larry Wall
 细细数来，我好像还没有做过源码的东西，不看看优秀的源码，如何才能够有长远的进步呢？就从 Java 开始，边看边总结这些源码。先看Integer。
初识 Integer 首先Integer是一个类，包装 int 的类，为了更好地和其他方法和范型配合，所以需要把基础类型包装成一个类。既然是类当然就可以设置为 null，这是基本类型做不到的，基本类型初始化也只能是 0。 Integer 和 int 在实际操作过程中是可以相等的，Integer 在匹配 int 类型的数据的时候，就会自动装箱和拆箱。 基本上，我对 Integer 的理解也就到这个程度。这样就可以理解为什么以下的结果有所不同：
int i = 0; Integer i2 = 0; Integer i3 = new Integer(0); Integer i4 = new Integer(0); Integer i5 = 0; System.out.println(i == i2); // true System.</description>
    </item>
    
  </channel>
</rss>
