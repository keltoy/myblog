<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Toy&#39;s Blogs</title>
    <link>http://keltoy.github.io/tags/redis/</link>
    <description>Recent content in Redis on Toy&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 29 Apr 2017 12:12:58 +0000</lastBuildDate><atom:link href="http://keltoy.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis 并发小结</title>
      <link>http://keltoy.github.io/posts/redis-%E5%B9%B6%E5%8F%91%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 29 Apr 2017 12:12:58 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/redis-%E5%B9%B6%E5%8F%91%E5%B0%8F%E7%BB%93/</guid>
      <description>Preface 实习了一段时间，一直没有写东西了，最近清闲了一些，开始总结一些实习上所获取的经验。不是很高深，但是可能经常会用到。
应用场景 比如要在网上买理财产品，每个理财产品都是有限定金额的。这个产品会有一个总金额 totalAmount，每个人都可以买，也不限制买多少，但是所有人的购买金额不能超过这个总金额。这是一个很简单的场景，之前没有接触缓存的时候处理也比较简单。这些用户购买的数据是存到数据库中的，因此可以通过数据库直接控制。
使用数据库锁进行处理 使用数据库的共享锁和排他锁是可以实现数据的同步的。但是我没有实际实验过，所有人都说尽量不要这么去实现，效率会低很多。
共享锁： SELECT ... LOCK IN SHARE MODE; 排他锁： SELECT ... FOR UPDATE; 个人的理解，共享锁(S)和排他锁(X)就是读写锁，这种形式在读多写少的情况下会比较高效。
使用数据库的乐观并发机制 使用乐观并发机制，可以在相应的表中添加一个 version 列，每次在购买前获取一下 version，然后进行购买时检查version是否有变化，如果有变化就不进行处理，如果没有变化，在确保成功后更改 version。
当然，在我所举例的例子中，这个 version 可以直接是 总金额 totalAmount，每次操作的时候都对这个总金额进行改变，如果总金额小于0了，说明不能进行处理，回滚处理，购买不成功
看似是个不错的方法，但是有很多的限制。如果数据库不允许修改，而一开始并没有总金额或者 version 这样的列呢，用 updatedtime 也能够实现，但是据说用时间索引效率会低很多。如果数据库分库分表了，又该如何控制？
使用Redis进行并发控制 setnx setnx 是一个事务操作，会先检查缓存中是否存在，如果不存在则设置，否则不做更改。 这样设计不会出现没有volatile 双重检测出现的那样的问题，不会在判断有无之后，插入数据之前的时间插入另外的数据。那么使用 setnx 的用法就与 mutex非常类似，在插入前 setnx，确认成功之后，进行 del。
setnx key value ... del key 在此之前，我也想过使用 incrby 对数据进行增加和减少，但是，在这种情况下，防不住并发。
一点思考 假设现在需要做一点改变。假设每个人最多只能购买三次，第四次购买就失败。如果这样，如果不允许在数据库中需要添加一个 purchase 的列，怎么使用redis 进行设计？ 同样是使用 setnx，然后在内部再使用一个 incrby 是否就安全了？
消息队列 如果使用消息队列，能够保证数据是一个个到来的，那么是不是也可以保证并发，而且降低了复杂度？但是对于一个简单的需求，使用消息的代价也不小。
Postscript 将传统项目放到分布式架构上，就容易出现问题。分布式的消息传递代价也不小，因此，并发这块一直也很热。</description>
    </item>
    
  </channel>
</rss>
