<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>source code on Toy&#39;s Blogs</title>
    <link>http://keltoy.github.io/tags/source-code/</link>
    <description>Recent content in source code on Toy&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 10 Nov 2016 23:09:39 +0000</lastBuildDate><atom:link href="http://keltoy.github.io/tags/source-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Source Code in Java -- Spring IOC - II</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-spring-ioc-ii/</link>
      <pubDate>Thu, 10 Nov 2016 23:09:39 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-spring-ioc-ii/</guid>
      <description>Preface  简单来说 IoC 容器的初始化是由 refresh() 方法启动的，这个方法标志着 IoC 容器正式启动。具体来说这个启动包括 BeanDefinition 的 Resource 定位、载入和注册三个基本过程。
 关于这段话我首先不能理解的就是无缘无故出来的这个BeanDefinition，我在浏览这些源码的时候也没看到。因此，为了好好了解 Spring IoC，我还需要进一步查看内部源码和解释。
What is BeanDefinition?  对 IoC 来说，BeanDefinition 就是对依赖反转模式中管理的对象依赖关系的数据抽象。
Spring 通过定义 BeanDefinition 来管理基于 Spring 的应用中的各种对象以及它们之间的相互依赖关系。BeanDefinition 抽象了我们对 Bean 的定义，是让容器起作用的主要数据类型。
 我的理解 BeanDefinition 有点像 Bean 的元数据，又有点像抽象类，又有点像 schema。
Resource location of BeanDefinition 再次拿出来这幅图来讲一下，像 ClassPathXmlApplicationContext 这样的方法定位资源的方式还是使用的 DefaultResourceLoader。而这个 DefaultResourceLoader 实现的是 ResourceLoader 接口：
public interface ResourceLoader { /** Pseudo URL prefix for loading from the class path: &amp;#34;classpath:&amp;#34; */ String CLASSPATH_URL_PREFIX = ResourceUtils.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Spring IoC</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-spring-ioc/</link>
      <pubDate>Wed, 02 Nov 2016 23:46:46 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-spring-ioc/</guid>
      <description>Preface Spring 的源码在网上基本上都被研究透了，我之前的理解实际上也是基于书本和基于一些项目。既然是阅读源码，那么 Spring 的源码是不得不看的。
Spring IoC 设计 网上找的一张图，和书上的一样，先拿过来用了：
挺多的，但是不复杂，从名字就可以看出来每个类或者接口。
 这个接口系统是以 BeanFactory 和 ApplicationContext 为核心的。
 因此主要也是介绍这两个接口。
BeanFactory  提供的是最基本的 IoC 容器功能 可以使用转义符“&amp;amp;”获取FactoryBean 设计的 getBean 方法是使用 IoC 容器的主要方法。  对于这个转义符，我没弄明白，书上是这么介绍的：
 用户使用容器时，可以使用转义符“&amp;amp;”来得到 FactoryBean 本身，用来区分通过容器来获取 FactoryBean 产生的对象和获取 FacoryBean 产生的对象和获取 FactoryBean 本身。
 简单来说，就是加上“&amp;amp;”之后获取的是 FactoryBean，而不是 FactoryBean 产生的对象。
需要注意的是 BeanFactory 是 IoC容器或者对象工厂，FactoryBean 是 Bean。
public interface BeanFactory { /** * Used to dereference a {@link FactoryBean} instance and distinguish it from * beans &amp;lt;i&amp;gt;created&amp;lt;/i&amp;gt; by the FactoryBean.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- ArrayList</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-arraylist/</link>
      <pubDate>Tue, 25 Oct 2016 23:46:28 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-arraylist/</guid>
      <description>前言 ArrayList，相信大家都不陌生了，它的源码网上也是到处都是，但是我还是想看看，也许会有不一样的发现。
初识 ArrayList ArrayList，顺序列表，非线程安全的，基本用法和数组类似，但是可以扩容。默认初始大小为 10， 扩容大小为 1.5 倍。基本上就这么多。本身构造也简单。
思考 ArrayList 为什么会出现 ArrayList 这个类呢，数组不能够满足要求吗？除了可以扩容，他跟数组有什么区别呢？ 扩容为什么是 1.5 倍？ 初始大小为什么是 10？
ArrayList 源码 ArrayList 变量 基于 1.8 的源码，基本上也没太多可说的，主要针对查找、添加、删除、以及扩容方面进行了解。 首先是 ArrayList 的属性。
public class ArrayList&amp;lt;E&amp;gt; extends AbstractList&amp;lt;E&amp;gt; implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable { private static final long serialVersionUID = 8683452581122892189L; /** * Default initial capacity. */ private static final int DEFAULT_CAPACITY = 10; /** * Shared empty array instance used for empty instances. */ private static final Object[] EMPTY_ELEMENTDATA = {}; /** * Shared empty array instance used for default sized empty instances.</description>
    </item>
    
    <item>
      <title>Source Code in Java -- Integer</title>
      <link>http://keltoy.github.io/posts/source-code-in-java-integer/</link>
      <pubDate>Tue, 11 Oct 2016 00:41:30 +0000</pubDate>
      
      <guid>http://keltoy.github.io/posts/source-code-in-java-integer/</guid>
      <description>前言  Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris. &amp;ndash; Larry Wall
 细细数来，我好像还没有做过源码的东西，不看看优秀的源码，如何才能够有长远的进步呢？就从 Java 开始，边看边总结这些源码。先看Integer。
初识 Integer 首先Integer是一个类，包装 int 的类，为了更好地和其他方法和范型配合，所以需要把基础类型包装成一个类。既然是类当然就可以设置为 null，这是基本类型做不到的，基本类型初始化也只能是 0。 Integer 和 int 在实际操作过程中是可以相等的，Integer 在匹配 int 类型的数据的时候，就会自动装箱和拆箱。 基本上，我对 Integer 的理解也就到这个程度。这样就可以理解为什么以下的结果有所不同：
int i = 0; Integer i2 = 0; Integer i3 = new Integer(0); Integer i4 = new Integer(0); Integer i5 = 0; System.out.println(i == i2); // true System.</description>
    </item>
    
  </channel>
</rss>
